	java提供一种叫做"抽象方法的机制",这种方法是不完善的, 仅声明而没有定义
	abstract void f();
包含抽象方法的类叫做抽象类,如果一个类包含一个或多个抽象方法, 该类必须被限定为抽象的

	接口是抽象方法的集合

二者区别:
1.抽象类可以有构造函数, 接口中不能有
2.抽象类中可以有普通变量, 接口中没有普通成员变量
3.抽象类中可以包含非抽象的普通方法, 接口中的所有方法都必须时抽象的,不能有非抽象的普通方法
4.抽象类中的抽象方法访问类型可以是public protected和(默认类型), 但接口中的抽象方法只能是public, 并且默认是public abstract类型
5.抽象类中可以包含静态方法, 接口不行
6.抽象类和接口中都可以包含静态成员变量(static),抽象类中的静态成员变量访问类型可以任意, 但接口内只能是public static final, 并且默认即为public static final
7.接口中的域不能是空final, 但可以是非常量表达式初始化, 它们在第一次被加载时初始化,这发生在任何域首次被访问时, 这些域不是接口的一部分, 它们的值被存储在该接口的静态存储区域
8.一个派生类可以继承多个接口, 只能继承一个抽象类


使用接口的核心原因:
	为了能够向上转型为多个基类型(以及由此而带来的灵活), 然而, 使用接口的第二个原因是防止客户端程序设计人员创建该类的对象, 并确保这只是一个接口.

选择接口还是抽象类
	如果要创建的不带任何方法定义和成员变量的基类, 那么就应该选择接口. 事实上, 如果知道某一事物应该成为一个基类, 那么第一选择是让他成为一个接口



















